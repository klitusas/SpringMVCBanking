package banking;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.stereotype.Controller;

@Controller
public class AccountsController {

	@Autowired
	UserRepository repository;

	@Autowired
	AccountRepository accountRepository;
	
	@Autowired
	TransactionRepository transactionRepository;
	
	@RequestMapping("/account/{id}")
	public String developer(@PathVariable Long id, Model model) {
		long num = 1;
        model.addAttribute("account", accountRepository.findOne(id));
        model.addAttribute("usr", repository.findOne(num));
        model.addAttribute("user", accountRepository.findAll());
        model.addAttribute("transaction", transactionRepository.findAll());
        return "account";
	}

    @RequestMapping(value="/accounts",method=RequestMethod.GET)
	public String accountsList(Model model) {
        model.addAttribute("accounts", accountRepository.findAll());
        model.addAttribute("users", repository.findAll());
        return "accounts";
	}

    @RequestMapping(value="/accounts",method=RequestMethod.POST)
	public String accountsAdd(@RequestParam String label, 
						@RequestParam String description, Model model) {
        Account newAccount = new Account();
        newAccount.setLabel(label);
        newAccount.setDescription(description);
        accountRepository.save(newAccount);

        model.addAttribute("account", newAccount);
        model.addAttribute("users", repository.findAll());
        return "redirect:/developer/" + newAccount.getId();
	}

    @RequestMapping(value="/accounts/{id}/users", method=RequestMethod.POST)
	public String accountsAddSkill(@PathVariable Long id, @RequestParam Long userId, Model model) {
//    	User user = repository.findOne(userId);
    	Account account = accountRepository.findOne(id);

    	if (account != null) {

    		accountRepository.save(account);
            model.addAttribute("account", accountRepository.findOne(id));
            model.addAttribute("users", repository.findAll());
            return "redirect:/account/" + account.getId();
    	}

        model.addAttribute("accounts", accountRepository.findAll());
        return "redirect:/accounts";
    }
    
    @RequestMapping(value="/transfer",method=RequestMethod.GET)
	public String transferList(Model model) {
        model.addAttribute("deposit", transactionRepository.findAll());
        model.addAttribute("accounts", accountRepository.findAll());
        return "transfer";
	}
    
    @RequestMapping(value="/transfer",method=RequestMethod.POST)
	public String transferAdd(@RequestParam String description, @RequestParam int fromAccount, 
						@RequestParam int toAccount, @RequestParam double amount, Model model) {
    	Date dNow = new Date( );
        Transaction newTransaction = new Transaction();
        newTransaction.setDate(dNow);
        newTransaction.setDescription(description);
        newTransaction.setToAccount(toAccount);
        newTransaction.setFromAccount(fromAccount);
        newTransaction.setAmount(amount);
        long id = fromAccount;
        long ids = toAccount;
        Account accountFrom = accountRepository.findOne(id);
        Account accountTo = accountRepository.findOne(ids);
        double secondAmount = amount;
        accountFrom.setBalance(accountFrom.getBalance() - secondAmount );
        accountTo.setBalance(accountTo.getBalance() +secondAmount);
        accountFrom.getTransaction().add(newTransaction);
        transactionRepository.save(newTransaction);
        
        model.addAttribute("transfer", newTransaction);
        model.addAttribute("transfer",transactionRepository.findAll());
        return "redirect:/accounts/";
	}
    
    @RequestMapping(value="/deposit",method=RequestMethod.GET)
	public String depositList(Model model) {
        model.addAttribute("accounts", accountRepository.findAll());
        return "accounts";
	}
    @RequestMapping(value="/accounts",method=RequestMethod.POST)
	public String depositAdd(@RequestParam double amount, Model model) {
    	long id = 1;
        Account newAccount = accountRepository.findOne(id);
        newAccount.getBalance()
        newAccount.setLabel(label);
        newAccount.setDescription(description);
        accountRepository.save(newAccount);

        model.addAttribute("account", newAccount);
        model.addAttribute("users", repository.findAll());
        return "redirect:/developer/" + newAccount.getId();
	}
    

}
